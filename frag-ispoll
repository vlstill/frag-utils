#!/usr/bin/env python3
from __future__ import annotations

import argparse
import common
import isapi.files
import os
import os.path
import psycopg2  # type: ignore
import re
import sys
import typing

from common import fprint
from isapi.files import FileMeta
from typing import Optional, Dict, Pattern, TypeVar

τ = TypeVar("τ")


def cmdparser() -> argparse.ArgumentParser:
    return common.cmdparser("Poller for connecting IS submission folders "
                            "to FRAG")


class Assignment(common.BaseAssignment):
    RE_ANY = re.compile(".*")
    NAME_TEMPLATE = "name template"

    def __init__(self, raw: dict, name: str, config: Config,
                 db: psycopg2.connection) -> None:
        super().__init__(raw, name, config, db)
        assert "source" in self.raw
        source = self.raw['source']
        assert "sources" in config.raw
        assert source in config.raw["sources"]
        self.sources = config.raw["sources"][source]
        self.name_template = self._name_template()

    def __str__(self) -> str:
        return self._str(f"sources = {self.sources} "
                         f"template = {self.name_template}")

    def _name_template(self) -> Pattern[str]:
        if Assignment.NAME_TEMPLATE not in self.raw:
            return Assignment.RE_ANY
        raw_name = self.raw[Assignment.NAME_TEMPLATE]
        name, ext = os.path.splitext(raw_name)
        return re.compile(fr"(\d+-)?(\w+-)?{name}(_[a-z]+)?[.]{ext[1:]}")


class Config(common.BaseConfig):
    def assignments(self, db: psycopg2.connection) -> Dict[str, Assignment]:
        asgns = self._assignments()
        return {name: Assignment(raw, name, self, db)
                for name, raw in asgns.items()}


def poll(args: argparse.Namespace, config: Config) -> None:
    db = config.connect_db()

    isconn = isapi.files.Connection()
    for asgn in config.assignments(db).values():
        if not asgn.enabled:
            continue
        if asgn.id is None:
            fprint(f"Assignment {asgn.name} not in frag, skipping…",
                   file=sys.stderr)
            continue

        assert asgn.file_names is not None
        if len(asgn.file_names) != 1:
            raise Exception(f"Assignment {asgn.name} has "
                            f"{len(asgn.file_names)} files defined in frag,"
                            " but it needs to have 1.")

        for ispath in asgn.sources:
            dirm = isconn.list_directory(ispath)
            for filem in dirm.entries:
                if asgn.name_template.fullmatch(filem.shortname):
                    process_file(asgn, config, db, isconn, filem)


def get_ispath_id(filem: FileMeta, cur: psycopg2.cursor) -> Optional[int]:
    cur.execute("select id from frag_ispoll.ispath where path = %s",
                (filem.ispath,))
    if cur.rowcount == 0:
        return None
    assert cur.rowcount == 1
    return typing.cast(int, cur.fetchone()[0])


def file_processed(filem: FileMeta, db: psycopg2.connection) -> bool:
    with db.cursor() as cur:
        ispath_id = get_ispath_id(filem, cur)
        if ispath_id is None:
            return False
        cur.execute("select count(*) from frag_ispoll.processed"
                    "  where ispath_id = %s"
                    "    and objid = %s"
                    "    and change_time = %s",
                    (ispath_id, filem.objid, filem.change_time))
        return bool(cur.fetchone()[0])


def confirm_file(filem: FileMeta, db: psycopg2.connection) -> None:
    with db.cursor() as cur:
        cur.execute("insert into frag_ispoll.ispath (path)"
                    " values (%s)"
                    " on conflict do nothing"
                    " returning (id)",
                    (filem.ispath, ))
        res = cur.fetchone()
        ispath_id = res[0] if res is not None else get_ispath_id(filem, cur)
        assert ispath_id > 0
        cur.execute("insert into frag_ispoll.processed"
                    " (ispath_id, change_time, objid)"
                    " values (%s, %s, %s)",
                    (ispath_id, filem.change_time, filem.objid))


def submit_file(asgn: Assignment, filem: FileMeta, db: psycopg2.connection,
                isconn: isapi.files.Connection) -> None:
    file_data = isconn.get_file(filem).data
    assert asgn.id is not None
    assert asgn.file_names is not None
    common.submit_assignment(asgn.id, filem.author, db,
                             [common.File(asgn.file_names[0], data=file_data)])


def process_file(asgn: Assignment, config: Config, db: psycopg2.connection,
                 isconn: isapi.files.Connection, filem: FileMeta) -> None:
    if file_processed(filem, db):
        return
    fprint("processing", filem.ispath, filem.change_time, filem.objid, asgn,
           "…")
    submit_file(asgn, filem, db, isconn)
    confirm_file(filem, db)
    db.commit()


def check_init_db(config: Config) -> None:
    db = config.connect_db()
    with db.cursor() as cur:
        cur.execute("create schema if not exists frag_ispoll")
        cur.execute("create table if not exists frag_ispoll.ispath ("
                    "  id serial primary key,"
                    "  path bytea not null unique"
                    ")")
        cur.execute("create table if not exists frag_ispoll.processed ("
                    "  ispath_id integer not null,"
                    "  change_time timestamp without time zone not null,"
                    "  objid integer,"
                    "  constraint processed_ispath_id_ispath_id_fkey"
                    "    foreign key (ispath_id)"
                    "      references frag_ispoll.ispath(id),"
                    "  constraint processed_unique"
                    "    unique (ispath_id, change_time, objid)"
                    ")")
        db.commit()
    db.close()


if __name__ == "__main__":
    common.main(cmdparser, Config, check_init_db, poll)

# vim: colorcolumn=80 expandtab sw=4 ts=4
